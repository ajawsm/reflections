What happens when you initialize a repository? Why do you need to do it?

It creates a hidden folder for commits. To initiate a place to save all future commits.

How is the staging area different from the working directory and the repository?
What value do you think it offers?


The staging area allows you to manage the file commits in blocks, chunks, or
individually, depending on their dependencies and commit them simultaneously,
once your updates are completed.

How can you use the staging area to make sure you have one commit per logical
change?

You can manage changes within the staging area before pushing them to the
working directory. You can select which file in the staging area you would like
to commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches would be helpful for adding different modes, settings, or when
experimenting with big new features and expansions - like a testing mode.

How do the diagrams help you visualize the branch structure?

They create a visual reference to help understand what commits a branch
can and cannot reach and how to link commits to branches, keeping structural
integrity among the file chronology.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
